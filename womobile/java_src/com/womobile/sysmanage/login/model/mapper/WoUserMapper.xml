<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="WoUser">

	<resultMap id="RM.WoUser" type="com.womobile.sysmanage.login.model.WoUser">
        <result property="userId" column="user_id"/>
        <result property="groupId" column="group_id"/>
        <result property="username" column="username"/>
        <result property="passwd" column="passwd"/>
        <result property="repasswd" column="repasswd"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="WoUser.columns">
	    <![CDATA[
		user_id,group_id,username,passwd,repasswd
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="WoUser.insert" useGeneratedKeys="true" keyProperty="userId">
    <![CDATA[
        INSERT INTO wo_user (
        	user_id ,
        	group_id ,
        	username ,
        	passwd ,
        	repasswd 
        ) VALUES (
        	#{userId} ,
        	#{groupId} ,
        	#{username} ,
        	#{passwd} ,
        	#{repasswd} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="WoUser.update" >
    <![CDATA[
        UPDATE wo_user SET
	        group_id = #{groupId} ,
	        username = #{username} ,
	        passwd = #{passwd} ,
	        repasswd = #{repasswd} 
        WHERE 
	        user_id = #{userId} 
    ]]>
	</update>

    <delete id="WoUser.delete">
    <![CDATA[
        DELETE FROM wo_user WHERE
        user_id = #{id} 
    ]]>
    </delete>
    
    <select id="WoUser.getById" resultMap="RM.WoUser">
		SELECT <include refid="WoUser.columns" />
	    <![CDATA[
		    FROM wo_user 
	        WHERE 
		        user_id = #{id} 
	    ]]>
	</select>
	
	<sql id="WoUser.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(userId)">
				AND user_id = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(groupId)">
				AND group_id = #{groupId}
			</if>
	       <if test="@Ognl@isNotEmpty(username)">
				AND username = #{username}
			</if>
	       <if test="@Ognl@isNotEmpty(passwd)">
				AND passwd = #{passwd}
			</if>
	       <if test="@Ognl@isNotEmpty(repasswd)">
				AND repasswd = #{repasswd}
			</if>
		</where>
	</sql>
		
    <select id="WoUser.findPage.count" resultType="long">
        SELECT count(*) FROM wo_user 
		<include refid="WoUser.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="WoUser.findPage" resultMap="RM.WoUser">
    	SELECT <include refid="WoUser.columns" />
	    FROM wo_user 
		<include refid="WoUser.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>


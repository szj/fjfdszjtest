/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.qzgf.NetStore.struts.action.BackAction;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.qzgf.NetStore.persistence.News;
import com.qzgf.NetStore.pub.Page;
import com.qzgf.NetStore.service.INewsService;
import com.qzgf.NetStore.struts.form.BackForm.NewsForm;

/** 
 * MyEclipse Struts
 * Creation date: 08-25-2008
 * 
 * XDoclet definition:
 * @struts.action path="/news" name="newsForm" input="/form/news.jsp" parameter="status" scope="request" validate="true"
 */
public class NewsAction extends DispatchAction {
	private INewsService newsService;

	public INewsService getNewsService() {
		return newsService;
	}

	public void setNewsService(INewsService newsService) {
		this.newsService = newsService;
	}

	/** 
	 * 查询所有的新闻
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings("unchecked")
	public ActionForward queryAllNews(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//NewsForm f = (NewsForm) form;
		@SuppressWarnings("unused")
		String page =request.getParameter("page");
		if ("".equals(page) || page==null)	{
			page =request.getParameter("targetPage");
		}
		
		if ("".equals(page) || page==null)	{
			page="1";
		}
		//判断一下输入的页值是不是大于总的页数
		String totalPages= request.getParameter("totalPages");
		if  (!"".equals(totalPages) && totalPages!=null)
			if ((Integer.parseInt(page))>(Integer.parseInt(totalPages)))//输入的页数不能超过总页数
				page=totalPages;
	         //判断一下输入的页值是不是大于总的页数	
			request.setAttribute("targetPage", page);
			request.setAttribute("page", page);
		Page ppage = this.newsService.queryAllNews(Integer.parseInt(page));
		request.setAttribute("ppage",ppage);
		return mapping.findForward("news_Page");
	}
	
	@SuppressWarnings("unchecked")
	public ActionForward queryNewsById(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//NewsForm f = (NewsForm) form;
		@SuppressWarnings("unused")
		String id=request.getParameter("id");
		Map newsMap=this.newsService.queryNewsById(id); 
		request.setAttribute("newsMap",newsMap);
		return mapping.findForward("newsModify_Page");
	}
	
	@SuppressWarnings("unchecked")
	public ActionForward updateNews(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NewsForm f = (NewsForm) form;
		String id=request.getParameter("id");
		String content1=f.getContent();
		News news=new News();
		news.setNewsId(id);
		news.setNewsTitle(f.getNewsTitle());
		news.setNewsContent(content1);
		boolean flag=this.newsService.updateNews(news);
		if(flag){
		    return this.queryAllNews(mapping, form, request, response);
		}
		else{
			return null;
		}
	}
	
	@SuppressWarnings("unchecked")
	public ActionForward addNews(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NewsForm f = (NewsForm) form;
		//String userId=request.getSession().getAttribute("userId");
		String content1=f.getContent();
		News news=new News();
		news.setReleaseMan("whitewolf");
		news.setNewsTitle(f.getNewsTitle());
		news.setNewsContent(content1);
		boolean flag=this.newsService.addNews(news);
		if(!flag){
			Page ppage=this.newsService.queryAllNews(1); 
			request.setAttribute("ppage",ppage);
			return mapping.findForward("news_Page");
		}
		else{
			return null;
		}
	}
	
	public ActionForward to_addNews(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("addNews_Page");
	}
	
	public ActionForward deleteNews(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NewsForm f = (NewsForm) form;
		String[] ids=f.getNewsIds();
		boolean flag=this.newsService.deleteNews(ids);
		if(!flag){
		    return this.queryAllNews(mapping, form, request, response);
		}
		else{
			return null;
		}
	}
	
	@SuppressWarnings("unchecked")
	public ActionForward queryGroupByApplicationType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//NewsForm f = (NewsForm) form;
		String applicationType=request.getParameter("applicationType");
		List groupInfo=this.newsService.queryGroupsByApplicationType(applicationType);
		request.setAttribute("groupInfo",groupInfo);
		return mapping.findForward("newsGroup_Page");
	}
	
	@SuppressWarnings("unchecked")
	public ActionForward addGroup(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		NewsForm f = (NewsForm) form;
		String groupName=f.getGroupName();
		String description=f.getDescription();
		boolean flag=this.newsService.addGroup(groupName, description, "1", null);
		if(flag){
			return null;
		}else{
			List groupInfo=this.newsService.queryGroupsByApplicationType("1");
			request.setAttribute("groupInfo",groupInfo);
			return mapping.findForward("newsGroup_Page");
		}
	}
	
	@SuppressWarnings("unchecked")
	public ActionForward queryGroupByGroupId(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String groupId=request.getParameter("groupId");
		Map map=this.newsService.queryGroupByGroupId(groupId);
		request.setAttribute("groupMap", map);
		return mapping.findForward("modifyGroup_Page");
	}
	
	@SuppressWarnings("unchecked")
	public ActionForward updateGroup(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		NewsForm f=(NewsForm)form;
		String groupId=request.getParameter("groupId");
		String groupName=f.getGroupName();
		String description=f.getDescription();
		boolean flag=this.newsService.updateGroup(groupId, groupName, description);
		if(flag){
			List groupInfo=this.newsService.queryGroupsByApplicationType("1");
			request.setAttribute("groupInfo",groupInfo);
			return mapping.findForward("newsGroup_Page");
		}
		else{
			return null;
		}
	}
	
	@SuppressWarnings("unchecked")
	public ActionForward deleteGroupByGroupId(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		String groupId=request.getParameter("groupId");
		boolean flag=this.newsService.deleteGroup(groupId);
		if(!flag){
			List groupInfo=this.newsService.queryGroupsByApplicationType("1");
			request.setAttribute("groupInfo",groupInfo);
			return mapping.findForward("newsGroup_Page");
		}
		else{
			return null;
		}
	}
}
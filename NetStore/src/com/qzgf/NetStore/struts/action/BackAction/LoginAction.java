/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.qzgf.NetStore.struts.action.BackAction;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.qzgf.NetStore.persistence.Administrator;
import com.qzgf.NetStore.persistence.Menu;
import com.qzgf.NetStore.pub.ThreadVariableManager;
import com.qzgf.NetStore.pub.WebConstant;
import com.qzgf.NetStore.pub.WebEndServiceLocator;
import com.qzgf.NetStore.pub.sessionMgr.ServerUserContext;
import com.qzgf.NetStore.pub.sessionMgr.SessionManager;
import com.qzgf.NetStore.service.ILoginService;

/** 
 * MyEclipse Struts
 * Creation date: 08-28-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="loginSuccess" path="/JspForm/login.jsp"
 */
public class LoginAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private ILoginService loginService;

	public ILoginService getLoginService() {
		return loginService;
	}

	public void setLoginService(ILoginService loginService) {
		this.loginService = loginService;
	}

	@SuppressWarnings("unchecked")
	//处理登录成功的转发
	public ActionForward loginEnter(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String userId = request.getParameter("admin");
		String mm = request.getParameter("password");
		List loginList = this.loginService.LoginIsSuccess(mm, userId);
        
		if (loginList.size()>=1) {
			Administrator ad = (Administrator) loginList.get(0);
			if (!ad.getAdminId().equals("")) {
				// 将用户信息定入线程中，为以后调用方便，之后便删除aid,rid
				try {
					//放入线程
					//LoginContextUtil.setLoginContext(ad);
					ServerUserContext suc=new ServerUserContext();
					suc.setAdmin(ad);
					String sessionId = SessionManager.getInstance().requestSessionId(suc);
					ThreadVariableManager.getInstance().setCurrentSessionId(sessionId);
					//把当前用户的用户名放进去
					ThreadVariableManager.getInstance().getCurrentServerUserContext().setCurUserId(ad.getAdminId());
			        // 将分配的返回给用户
			        HttpSession session = request.getSession();
			        // 将应用sessionId放入WebSession
			        session.setAttribute(WebConstant.SESSIONID, sessionId);
					
				} catch (IllegalStateException e1) {
					request.setAttribute("loginFail", "用户名和密码不匹配.");
					
					return mapping.findForward("loginFail");
				}
				request.getSession().setAttribute("adminId", userId);
				return mapping.findForward("loginSuccess");
			}
			else
			{
				
				request.setAttribute("loginFail", "用户名和密码不匹配.");
				return mapping.findForward("loginFail");
			}
			
		} else {
			request.setAttribute("loginFail", "用户名和密码不匹配.");
			return mapping.findForward("loginFail");
		}
		
		
		
		
	}

	@SuppressWarnings("unchecked")
	public ActionForward LeftTree(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		//Administrator ad = LoginContextUtil.getLoginContext();
		SessionManager sm=SessionManager.getInstance();
		String sessionId=(String)request.getSession().getAttribute(WebConstant.SESSIONID);
	    
		Administrator ad=sm.getAdministrator(sessionId);
        
		String mlbh = "";
		String mlmc = "";
		List topmenulist = new ArrayList();
		topmenulist = this.loginService.getTopMenu("0",ad);
		Iterator it = topmenulist.iterator();
		if (it.hasNext()) {
			Menu menu = new Menu();
			menu = (Menu) it.next();
			mlbh = menu.getTheCode();
			mlmc = menu.getTheName();
		}
		// 设置菜单值
		this.loginService.getLeftMenuList(mlbh, ad);

		// 查找目录编号
		List menulist = new ArrayList();
		menulist = this.loginService.getMenulist();

		// 查找模块编号
		List modulelist = new ArrayList();
		modulelist = this.loginService.getModulelist();

		// 具体模块菜单
		request.setAttribute("menu1list", modulelist);
		// 具体功能菜单
		request.setAttribute("modulelist",menulist );
		// 顶极菜单
		request.setAttribute("mlbh", mlbh);
		request.setAttribute("mlmc", mlmc);
		return mapping.findForward("loginLeftTree");
	}

	// /点击左侧菜单
	public ActionForward menuForward(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String mkbh = request.getParameter("ID");//编号
		String mklj = "";						 //地址
		mklj = loginService.getModulebyID(mkbh);
		if (mklj.equals("")) {
			return mapping.findForward("globalerror");
		} else {
			request.setAttribute("MKQX","1");
			return mapping.findForward(mklj);
		}
	}

	//退出登录
	public ActionForward loginExit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
	    SessionManager sessionMgr = SessionManager.getInstance();
	    String sessionid=(String)request.getSession().getAttribute(WebConstant.SESSIONID);
		boolean valid = sessionMgr.isValid(sessionid);
		// 判断sessionId是否合法 
		if (valid) {
			SessionManager.getInstance().removeSession(sessionid);
		}
		request.getSession().invalidate();
		return mapping.findForward("back_login");
	}
}
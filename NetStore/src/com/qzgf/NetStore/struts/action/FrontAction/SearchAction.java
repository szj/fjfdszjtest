/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.qzgf.NetStore.struts.action.FrontAction;

import java.io.UnsupportedEncodingException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.qzgf.NetStore.pub.Page;

import com.qzgf.NetStore.service.ISearchService;

/** 
 * MyEclipse Struts
 * Creation date: 09-23-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="searchSuccess" path="/JspForm/FrontfuncModual/search.jsp"
 */
public class SearchAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	private ISearchService searchService;
	//private IIndexFirstService indexFirstService;
	
	
	@SuppressWarnings("unchecked")
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String catalogId=request.getParameter("catalogName");
		request.setAttribute("catalogName", catalogId);
	
		if(!"0".equals(catalogId))
		{
		String searchStr="";
		try {
			request.setCharacterEncoding("gb2312");
			searchStr=request.getParameter("searchContent");
			
			if(null!=searchStr)
			{
				if(!"输入查找商品名称".equals(searchStr))
				{
					
				String searchSave=new String(searchStr.getBytes("GB2312"),"GB2312"); 
				
				if(!searchSave.equals(searchStr))
				{	
			     searchStr=new String(searchStr.getBytes("ISO-8859-1"),"GB2312"); 
				}
			    


				}
			}
			else
			{
				searchStr="";
			}
			
			if("输入查找商品名称".equals(searchStr))
			{
				searchStr="";
			}
			
			

		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		
		request.setAttribute("searchStr", searchStr);
		
		
		String page =request.getParameter("page");
		if ("".equals(page) || page==null)	{
			page =request.getParameter("targetPage");
		}
		
		if ("".equals(page) || page==null)	{
			page="1";
		}
		
		//判断一下输入的页值是不是大于总的页数
		String totalPages= request.getParameter("totalPages");
		if  (!"".equals(totalPages) && totalPages!=null)
		if ((Integer.parseInt(page))>(Integer.parseInt(totalPages)))//输入的页数不能超过总页数
			page=totalPages;

		
		Page ppage=this.searchService.searchProductList(page, searchStr, catalogId);
		request.setAttribute("ppage", ppage);
		
		//首页搜索顶部
		//List productList=this.searchService.topProduct();
		//request.setAttribute("productList", productList);
		return mapping.findForward("searchSuccess");
		
	}
	else //如果是所有分类
	{
		//商品分类
		
		//首页搜索顶部
		List productList=this.searchService.topProduct();
		request.setAttribute("productList", productList);
		
		List productCatalogList=this.searchService.pdtCatalog();
		request.setAttribute("productCatalogList", productCatalogList);
		
		//List productCatalogList
		//request.setAttribute("productCatalogList", productCatalogList);
		
	return mapping.findForward("searchAll");	
	}
		
		
		
	}

	public ISearchService getSearchService() {
		return searchService;
	}

	public void setSearchService(ISearchService searchService) {
		this.searchService = searchService;
	}
}
package com.qzgf.application.gpsdata.service;
//Generated by MyEclipse
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


import com.qzgf.application.gpsdata.domain.GpsDataFacade;

public class GpsDataServiceImpl implements GpsDataService {
	private Log log = LogFactory.getLog(GetListDatebyBytesImpl.class);
	private GpsDataFacade gpsDataFacade;
	/**
	 * 客户端请求的报文
	 */
	public List ProCommand(String commandStr)
	{
		//报文格式说明 "区域" ,＂报文指令＂，＂车辆编号＂,'开始日期','结束日期'
		log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"接收到报文格式:"+commandStr);
		//System.out.println((new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")).format(new Date())+"接收到报文格式:"+commandStr);
		List result=new ArrayList();//存放返回数组信息
		String[] cmdArray = commandStr.split(",");//分析报文指令
		HashMap search=new HashMap();
		search.put("AreaId", cmdArray[0]);//每个客户端都需要传递客户区域编号
		//请求车辆行驶记录
		if (cmdArray[1].equalsIgnoreCase("R")) {
			//得取查询条件
			if(!cmdArray[2].equalsIgnoreCase("*")) search.put("CarNum", cmdArray[2]);
			if(!cmdArray[3].equalsIgnoreCase("*")) search.put("begDate", cmdArray[3]);
			if(!cmdArray[4].equalsIgnoreCase("*")) search.put("endDate", cmdArray[4]);
			//返回结果集
			try {	
				result=GetDateGpsRecord(search);
				log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"获取取车辆行驶记录信息成功!");
				//System.out.println((new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")).format(new Date())+"获取取车辆行驶记录信息成功!");
			} catch (Exception e) {
				log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"获取取车辆行驶记录信息失败!");
				//System.out.println((new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")).format(new Date())+"获取取车辆行驶记录信息失败!");
				System.out.print(e.toString());
			}
		}
		//请求车辆信息
		else if(cmdArray[1].equalsIgnoreCase("C")) {
			//得取查询条件
			if(!cmdArray[2].equalsIgnoreCase("*")) search.put("CarNum", cmdArray[2]);
			//返回结果集
			try {
				result=GetDateGpsCarMsg(search);
				log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"获取取车辆信息成功!");
				//System.out.println((new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")).format(new Date())+"获取取车辆信息成功!");
			} catch (Exception e) {
				log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"获取取车辆信息失败!");
				//System.out.println((new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")).format(new Date())+"获取取车辆信息失败!");
				System.out.print(e.toString());
			}
		}
		//请求交结点信息
		else if(cmdArray[1].equalsIgnoreCase("J")){
			//返回结果集
			try {	
				result=GetDateGpsWarnMsg(search);
				log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"获取取交结点信息成功!");
				//System.out.println((new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")).format(new Date())+"获取取交结点信息成功!");
			} catch (Exception e) {
				log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"获取取交结点信息失败!");
				//System.out.println((new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")).format(new Date())+"获取取交结点信息失败!");
				System.out.print(e.toString());
			}
		}
		//请求定时器处理（一天的信息）
		else if(cmdArray[1].equalsIgnoreCase("GPS_Timer")){
			//返回结果集
			if(!cmdArray[2].equalsIgnoreCase("*")) search.put("CarNum", cmdArray[2]);
			try {	
				result=GetTimeGpsRecord(search);
				log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"定时器获取取车辆行驶记录成功!");
				//System.out.println((new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")).format(new Date())+"定时器获取取车辆行驶记录成功!");
			} catch (Exception e) {
				log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"定时器获取取车辆行驶记录失败!");
				//System.out.println((new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")).format(new Date())+"定时器获取取车辆行驶记录失败!");
				System.out.print(e.toString());
			}
		}
		else 
		{
			log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"没有相关指令的处理方法"+commandStr);
			//System.out.println((new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")).format(new Date())+"没有相关指令的处理方法"+commandStr);			
		}
		return result;
	}
	
	/**
	 * 动态sql查询结果
	 * @param commandStr
	 * @return
	 */
	public List DynamicCommand(String commandStr)
	{
		//报文格式说明 "表名TableName" ,"字段FiledName",＂条件CaseWhere＂
		log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"接收到报文格式:"+commandStr);
		//System.out.println((new SimpleDateFormat("yyyy-MM-dd hh:mm:ss")).format(new Date())+"接收到报文格式:"+commandStr);
		List result=new ArrayList();//存放返回数组信息
		String[] cmdArray = commandStr.split("!");//分析报文指令
		HashMap search=new HashMap();
		//请求车辆行驶记录
		//请求动态sql语句执行
		if(cmdArray[0].equalsIgnoreCase("Dynamic")){
			//返回结果集
			if(cmdArray[1].equalsIgnoreCase("&")) 
				return null;
			else
				search.put("TableName", cmdArray[1]);
			
			if(cmdArray[2].equalsIgnoreCase("&")) 
				return null;
			else
				search.put("FiledName", cmdArray[2]);

			if(!cmdArray[3].equalsIgnoreCase("&"))
				search.put("CaseWhere", cmdArray[3]);
			
			try {	
				result=GetDynamicRecord(search);
				log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"动态sql查询语句成功!");
			} catch (Exception e) {
				log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"动态sql查询语句失败!");
			}
		}
		else 
		{
			log.info((new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")).format(new Date())+"没有相关指令的处理方法"+commandStr);
		}
		return result;
	}
	/**
	 * 车辆GPS数据
	 * @param commandStr
	 * @return
	 */
	private List GetDateGpsRecord(HashMap hsmstr)
	{
		List result = new ArrayList();
		try {
			result = gpsDataFacade.findGpsRecord(hsmstr);
		} catch (Exception e) {
			System.out.print(e.toString());
		}
		return result;
	}	
	/**
	 * 取得车辆信息
	 * @param commandStr
	 * @return
	 */
	private List GetDateGpsCarMsg(HashMap hsmstr)
	{
		List result = new ArrayList();
		try {
			result = gpsDataFacade.findGpsCarMsg(hsmstr);
		} catch (Exception e) {
			System.out.print(e.toString());
		}
		return result;
	}
	/**
	 * 
	 * 取得交结点信息
	 * @param commandStr
	 * @return
	 */
	private List GetDateGpsWarnMsg(HashMap hsmstr)
	{
		List result = new ArrayList();
		try {
			result = gpsDataFacade.findGpsWarnMsg(hsmstr);
		} catch (Exception e) {
			System.out.print(e.toString());
		}
		return result;
	}	
	
	/**
	 * 车辆GPS数据(当天数据)定时器
	 * @param commandStr
	 * @return
	 */
	private List GetTimeGpsRecord(HashMap hsmstr)
	{
		List result = new ArrayList();
		try {
			result = gpsDataFacade.findTimeGpsRecord(hsmstr);
		} catch (Exception e) {
			System.out.print(e.toString());
		}
		return result;
	}	
	
	/**
	 * 动态sql执行结果
	 * @param commandStr
	 * @return
	 */
	private List GetDynamicRecord(HashMap hsmstr)
	{
		List result = new ArrayList();
		try {
			result = gpsDataFacade.DynamicSql(hsmstr);
		} catch (Exception e) {
			System.out.print(e.toString());
		}
		return result;
	}	
		
	/**
	 * @return the gpsDataFacade
	 */
	public GpsDataFacade getGpsDataFacade() {
		return gpsDataFacade;
	}
	/**
	 * @param gpsDataFacade the gpsDataFacade to set
	 */
	public void setGpsDataFacade(GpsDataFacade gpsDataFacade) {
		this.gpsDataFacade = gpsDataFacade;
	}
}
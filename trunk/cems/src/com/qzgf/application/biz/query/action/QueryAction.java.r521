package com.qzgf.application.biz.query.action;



import com.qzgf.application.BaseAction;

/**
 * 查询模块
 * @author lsr
 *
 */
@SuppressWarnings("serial")
public class QueryAction extends BaseAction{
	
	private String emsCheckCode;
	private String mailNum;
	
	public String execute() {
		try {
			System.out.println("emsCheckCode:"+emsCheckCode);
			System.out.println("action:"+this.getAction());
			return this.executeMethod(this.getAction());
		} catch (Exception e) {
			e.printStackTrace();
			return "index";
		}
	}
	
	public String index() throws Exception {
		//this.setAction("queryEms");
		this.setMailNum(this.getMailNum());
		this.setEmsCheckCode(this.emsCheckCode);
		//System.out.println("emsCheckCode:"+emsCheckCode);
		
		/*DefaultHttpClient httpclient = new DefaultHttpClient();

        //HttpGet httpget = new HttpGet("http://10.3.10.83/ems/newsystem/thesecond/ttq/ttqMailquery.jsp"); //http://10.3.10.83/ems/newsystem/thesecond/ttq/ttqMailquery.jsp

        ResponseHandler<String> responseHandler = new BasicResponseHandler();
        //String responseBody = httpclient.execute(httpget, responseHandler);
        //System.out.println(responseBody);
        
        
       //HttpResponse response = httpclient.execute(httpget);
        //HttpEntity entity = response.getEntity();

        System.out.println("Login form get: " + response.getStatusLine());
        if (entity != null) {
            entity.consumeContent();
        }
        
        System.out.println("Initial set of cookies:");
        
        //获得服务器的cookies
        List<Cookie> cookies = httpclient.getCookieStore().getCookies();
        if (cookies.isEmpty()) {
            System.out.println("None");
        } else {
            for (int i = 0; i < cookies.size(); i++) {
                System.out.println("- " + cookies.get(i).toString());
            }
        }
        
        HttpPost httpost = new HttpPost("http://10.3.10.83/ems/qcgzBaseQueryAction.do?reqCode=regoUrl");
        
        List <NameValuePair> nvps = new ArrayList <NameValuePair>();
        nvps.add(new BasicNameValuePair("mailNum", "eh075780755cn"));
        System.out.println(this.emsCheckCode);
        nvps.add(new BasicNameValuePair("myEmsbarCode",this.emsCheckCode));
       
        httpost.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));
        
        String response1 = httpclient.execute(httpost, responseHandler);
        
        System.out.println("----------------------------------1111");
        System.out.println(response1);
        
        
        entity = response.getEntity();
        
        System.out.println("Login form get1: " + response.getStatusLine());
        if (entity != null) {
            entity.consumeContent();
        }
        System.out.println("aaa-----------------------");
       
        System.out.println("bbb-----------------------");
        System.out.println("Post logon cookies:");
        cookies = httpclient.getCookieStore().getCookies();
        if (cookies.isEmpty()) {
            System.out.println("None");
        } else {
            for (int i = 0; i < cookies.size(); i++) {
                System.out.println("- " + cookies.get(i).toString());
            }
        }
        
        // When HttpClient instance is no longer needed, 
        // shut down the connection manager to ensure
        // immediate deallocation of all system resources
        httpclient.getConnectionManager().shutdown();  */
		
		
		
		return "EMS";
	}

	public String getEmsCheckCode() {
		return emsCheckCode;
	}

	public void setEmsCheckCode(String emsCheckCode) {
		this.emsCheckCode = emsCheckCode;
	}

	public String getMailNum() {
		return mailNum;
	}

	public void setMailNum(String mailNum) {
		this.mailNum = mailNum;
	}
	
	
	
}

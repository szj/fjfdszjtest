/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.qzgf.NetStore.struts.action.BackAction;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.qzgf.NetStore.persistence.Administrator;
import com.qzgf.NetStore.pub.Page;
import com.qzgf.NetStore.service.IManagerService;
import com.qzgf.NetStore.service.IRoleService;
import com.qzgf.NetStore.struts.form.BackForm.ManagerForm;
import com.qzgf.NetStore.util.MD5Code;

/**
 * MyEclipse Struts Creation date: 08-29-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/manager" name="managerForm" input="/form/manager.jsp"
 *                parameter="status" scope="request" validate="true"
 */
public class ManagerAction extends DispatchAction {
	private IManagerService managerService;
	
	private IRoleService roleService;

	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings("unchecked")
	public ActionForward queryManagers(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String page =request.getParameter("page");
		if ("".equals(page) || page==null)	{
			page =request.getParameter("targetPage");
		}
		
		if ("".equals(page) || page==null)	{
			page="1";
		}
		//判断一下输入的页值是不是大于总的页数
		String totalPages= request.getParameter("totalPages");
		if  (!"".equals(totalPages) && totalPages!=null)
			if ((Integer.parseInt(page))>(Integer.parseInt(totalPages)))//输入的页数不能超过总页数
				page=totalPages;
	         //判断一下输入的页值是不是大于总的页数	
			request.setAttribute("targetPage", page);
			request.setAttribute("page", page);
			Page ppage = this.managerService.queryAdministrators(Integer.parseInt(page));
			request.setAttribute("ppage",ppage);
			return mapping.findForward("administratorManage_Page");
	}

	/**
	 * 普通管理员查询自己的信息用来做简单的修改
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward queryManagerById(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String id = (String)request.getSession().getAttribute("adminId");
		Map managerMap = this.managerService.queryAdministratorById(id);
		request.setAttribute("managerMap", managerMap);
		return mapping.findForward("administratorModify_Page");
	}

	@SuppressWarnings("unchecked")
	public ActionForward deleteManagerById(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String id = request.getParameter("adminId");
		boolean flag = this.managerService.deleteManagerByID(id);
		String xgResult = "";
		if (flag) {
			xgResult = "成功删除一条记录";
			Page ppage = this.managerService.queryAdministrators(1);
			request.setAttribute("ppage", ppage);
			request.setAttribute("xgResult", xgResult);
			return mapping.findForward("administratorManage_Page");
		} else {
			xgResult = "删除数据失败";
			Page ppage = this.managerService.queryAdministrators(1);
			request.setAttribute("ppage", ppage);
			request.setAttribute("xgResult", xgResult);
			return mapping.findForward("administratorManage_Page");
		}
	}

	/**
	 * 普通管理人员修改自己的信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward updateManager(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ManagerForm f = (ManagerForm) form;
		String realName = f.getRealName();
		String sex = f.getSex();
		String email = f.getEmail();
		String old_password = f.getOld_password();
		String new_password1 = f.getNew_password1();
		String new_password2 = f.getNew_password2();
		String old_password_md5 = null;
		String new_password_md5 = null;
		String xgResult = null;
		MD5Code md5 = new MD5Code();
		boolean flag = false;// 1.false:代表不需要修改密码 2.true:代表需要修改密码
		// 做个简单的判断
		if (old_password == null || "".equals(old_password)) {
			// 如果没有输入旧的密码的话,则密码不做修改
			flag = false;
		} else {
			// 判断两个新密码的位数,及值是否一致
			if (!new_password1.equals(new_password2)
					|| new_password1.length() < 5
					|| new_password1.length() > 12) {
				xgResult = "新密码有误,请重输!";
			} else {
				// 可用的新密码,执行MD5加密
				flag = true;
				old_password_md5 = md5.getMD5ofStr(old_password);
				new_password_md5 = md5.getMD5ofStr(new_password1);
			}
		}
		Administrator admin = new Administrator();
		admin.setAdminId(f.getAdminId());
		admin.setRealName(realName);
		admin.setSex(sex);
		admin.setEmail(email);
		boolean resultFlag=false;
		// 有修改密码的话
		if (flag) {
			admin.setPassword(new_password_md5);
			admin.setOld_password(old_password_md5);
			//先判断旧密码是否正确
			boolean oldRight=this.managerService.ifPwdEnterRight(admin.getAdminId(), admin.getOld_password());
			if(oldRight){
				resultFlag = this.managerService.updateManager(admin, flag);
			}
			else{
				xgResult="旧密码输入有误请重输";
				
				Map managerMap = this.managerService.queryAdministratorById(f
						.getAdminId());
				request.setAttribute("managerMap", managerMap);
				request.setAttribute("xgResult", xgResult);
				return mapping.findForward("administratorModify_Page");
			}
		}
		 
		if (resultFlag) {
			// 修改成功
			xgResult = "密码修改成功";
			Map managerMap = this.managerService.queryAdministratorById(f
					.getAdminId());
			request.setAttribute("managerMap", managerMap);
			request.setAttribute("xgResult", xgResult);
			List roleList=this.roleService.queryRoles();
			request.setAttribute("roleList",roleList);
			return mapping.findForward("administratorModify_Page");
		} else {
			// 修改失败
			xgResult = "数据修改失败";
			Map managerMap = this.managerService.queryAdministratorById(f
					.getAdminId());
			request.setAttribute("managerMap", managerMap);
			request.setAttribute("xgResult", xgResult);
			List roleList=this.roleService.queryRoles();
			request.setAttribute("roleList",roleList);			
			return mapping.findForward("administratorModify_Page");
		}
	}
	
	/**
	 * 最高权限的管理员修改某个普通管理人员的资料
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward updateAdmin(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ManagerForm f = (ManagerForm) form;
		String realName = f.getRealName();
		String sex = f.getSex();
		String email = f.getEmail();
		String ifUse=f.getIfUse();
		String new_password1 = f.getNew_password1();
		String new_password2 = f.getNew_password2();
		String old_password_md5 = null;
		String new_password_md5 = null;
		String roleId=f.getRoleId();
		String adminId=f.getAdminId();
		String xgResult = null;
		MD5Code md5 = new MD5Code();
		boolean flag = false;// 1.false:代表不需要修改密码 2.true:代表需要修改密码
		// 做个简单的判断
		// 判断两个新密码的位数,及值是否一致
			if (!new_password1.equals(new_password2)
					|| new_password1.length() < 6
					|| new_password1.length() > 12) {
				xgResult = "新密码有误,请重输!";
			} else {
				// 可用的新密码,执行MD5加密
				flag = true;
				new_password_md5 = md5.getMD5ofStr(new_password1);
			}
		Administrator admin = new Administrator();
		admin.setRealName(realName);
		admin.setSex(sex);
		admin.setEmail(email);
		admin.setAdminId(adminId);
		admin.setRoleId(Integer.valueOf(roleId));
		admin.setIfUse(new Byte(ifUse));
		
		// 有修改密码的话
		if (flag) {
			admin.setPassword(new_password_md5);
			admin.setOld_password(old_password_md5);
		}
		boolean resultFlag = this.managerService.updateAdmin(admin, flag);
		if (resultFlag) {
			// 修改成功
			xgResult = "数据修改成功";
			request.setAttribute("xgResult", xgResult);
			Page ppage = this.managerService.queryAdministrators(1);
			request.setAttribute("ppage", ppage);
			return mapping.findForward("administratorManage_Page");
		} else {
			// 修改失败
			xgResult = "数据修改失败";
			request.setAttribute("xgResult", xgResult);
			Map infoMap = this.managerService.queryAdminById(adminId);
			request.setAttribute("infoMap", infoMap);
			List roleList=this.roleService.queryRoles();
			request.setAttribute("roleList",roleList);
			return mapping.findForward("managerModify_Page");
		}
	}

	public ActionForward adminManager(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ManagerForm f = (ManagerForm) form;
		String xgResult = "";
		String adminId = f.getAdminId();
		String password1 = f.getNew_password1();
		String password2 = f.getNew_password2();
		Administrator admin = new Administrator();

		if (adminId == null || "".equals(adminId)) {
			xgResult = "管理员ID不能为空";
			request.setAttribute("xgResult", xgResult);
		}
		if (password1 != null && password2 != null && password1 != ""
				&& password2 != "" && password1.equals(password2)
				&& password1.length() >= 6 && password1.length() <= 12) {
			MD5Code md5 = new MD5Code();
			admin.setAdminId(adminId);
			admin.setPassword(md5.getMD5ofStr(password1));
			admin.setEmail(f.getEmail());
			admin.setIfUse(new Byte("1"));
			admin.setRealName(f.getRealName());
			admin.setRoleId(Integer.valueOf(f.getRoleId()));
			admin.setSex(f.getSex());
			this.managerService.addAdmin(admin);
		} else {
			xgResult = "密码不正确,请重输";
			request.setAttribute("xgResult", xgResult);
		}
		return null;
	}

	@SuppressWarnings("unchecked")
	public ActionForward addManager(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ManagerForm f = (ManagerForm) form;
		String realName = f.getRealName();
		String adminId = f.getAdminId();
		String sex = f.getSex();
		String email = f.getEmail();
		String new_password1 = f.getNew_password1();
		String new_password2 = f.getNew_password2();
		String ifUse=f.getIfUse();
		String roleId=f.getRoleId();
		String new_password_md5 = null;
		String xgResult = null;
		MD5Code md5 = new MD5Code();
      
		// 判断两个新密码的位数,及值是否一致
		if (!new_password1.equals(new_password2) || new_password1.length() < 6
				|| new_password1.length() > 12) {
			xgResult = "新密码有误,请重输!";
			request.setAttribute("xgResult", xgResult);
			Map infoMap=new HashMap();
			infoMap.put("adminId", adminId);
			infoMap.put("sex", sex);
			infoMap.put("email", email);
			infoMap.put("ifUse", ifUse);
			infoMap.put("roleId", roleId);
			infoMap.put("realName", realName);
			request.setAttribute("infoMap", infoMap);
			List roleList=this.roleService.queryRoles();
			request.setAttribute("roleList",roleList);
			return mapping.findForward("administratorAdd_Page");
		} else {
			// 可用的新密码,执行MD5加密
			new_password_md5 = md5.getMD5ofStr(new_password1);
		}
		Administrator admin = new Administrator();
		admin.setAdminId(adminId);
		admin.setRealName(realName);
		admin.setSex(sex);
		admin.setEmail(email);
		admin.setPassword(new_password_md5);
		admin.setIfUse(new Byte(ifUse));
		admin.setRoleId(Integer.valueOf(roleId));
		boolean resultFlag = this.managerService.addAdmin(admin);
		if (!resultFlag) {
			// 修改成功
			xgResult = "数据添加成功";
			request.setAttribute("xgResult", xgResult);
			Page ppage= this.managerService.queryAdministrators(1);
			request.setAttribute("ppage", ppage);
			return mapping.findForward("administratorManage_Page");
		} else {
			// 修改失败
			xgResult = "数据修改失败";
			request.setAttribute("xgResult", xgResult);
			Map infoMap=new HashMap();
			infoMap.put("adminId", adminId);
			infoMap.put("sex", sex);
			infoMap.put("email", email);
			infoMap.put("ifUse", ifUse);
			infoMap.put("roleId", roleId);
			infoMap.put("realName", realName);
			request.setAttribute("infoMap", infoMap);
			List roleList=this.roleService.queryRoles();
			request.setAttribute("roleList",roleList);
			return mapping.findForward("administratorAdd_Page");
		}
	}
    
	/**
	 * 高级管理人员查询某一个管理人员的信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward queryAdminById(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String id = request.getParameter("id");
		Map infoMap = this.managerService.queryAdminById(id);
		request.setAttribute("infoMap", infoMap);
		List roleList=this.roleService.queryRoles();
		request.setAttribute("roleList",roleList);
		return mapping.findForward("managerModify_Page");
	}
	
	/**
	 * 跳转到超级管理员添加普通管理员的页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward to_addPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		List roleList=this.roleService.queryRoles();
		request.setAttribute("roleList",roleList);
		return mapping.findForward("administratorAdd_Page");
	}

	public IManagerService getManagerService() {
		return managerService;
	}

	public void setManagerService(IManagerService managerService) {
		this.managerService = managerService;
	}

	/**
	 * @return the roleService
	 */
	public IRoleService getRoleService() {
		return roleService;
	}

	/**
	 * @param roleService the roleService to set
	 */
	public void setRoleService(IRoleService roleService) {
		this.roleService = roleService;
	}
}
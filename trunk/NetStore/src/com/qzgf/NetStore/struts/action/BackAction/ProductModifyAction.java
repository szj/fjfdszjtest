/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.qzgf.NetStore.struts.action.BackAction;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.qzgf.NetStore.pub.Page;
import com.qzgf.NetStore.service.IProductModifyService;


/**
 * MyEclipse Struts Creation date: 08-13-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="failure" path="/JspForm/errors.jsp"
 * @struts.action-forward name="success"
 *                        path="/JspForm/BackfuncModual/Product.jsp"
 */
public class ProductModifyAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private IProductModifyService productModifyService;

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings("unchecked")
	public ActionForward onlyShow(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String pId = request.getParameter("pId");
		request.setAttribute("pId", pId);

		String page = request.getParameter("page");
		request.setAttribute("page", page);

		String selTypeUrl = request.getParameter("selTypeUrl");
		request.setAttribute("selTypeUrl", selTypeUrl);

		System.out.println("*******pId:" + pId);
		List productModifyList = this.productModifyService.showOnlyProduct(pId);
		request.setAttribute("productModifyList", productModifyList);

		
		
		
		// 取得List里面一个字段值
	 HashMap map = (HashMap) productModifyList.get(0);
	 String prdIntro=map.get("productIntro").toString();
	 String unitId=map.get("unitId").toString();
	 String manufacturerID=map.get("manufacturerID").toString();
	 String displayDate=map.get("displayDate").toString(); 
	 String productDate=map.get("productDate").toString();
	 
	 String isRelease=map.get("isRelease").toString();
	 
	 String isNewGoods=map.get("isNewGoods").toString();
	 String ifCommend=map.get("ifCommend").toString();
	 String catalogId=map.get("catalogId").toString();
	 String isSpecialPrice=map.get("isSpecialPrice").toString();
	 
	 
		// 获得文本区域值
		request.setAttribute("productIntro", prdIntro);

		// 单位
		request.setAttribute("UnitId", unitId);

		// 供应商id
		request.setAttribute("ManufacturerId", manufacturerID);

		// 商品id
		request.setAttribute("id", catalogId);//prd.getCatalogId());

		request.setAttribute("catalogName", this.productModifyService
				.getProductName(catalogId));

		// displayDate上架时间
		// String prd.getDisplayDate();
		//SimpleDateFormat bartDateFormat = new SimpleDateFormat("yyyy-MM-dd");
		//request.setAttribute("displayDate", bartDateFormat.format(displayDate));
		request.setAttribute("displayDate", displayDate);
		// productDate生产日期
		//request.setAttribute("productDate", bartDateFormat.format(productDate));
		request.setAttribute("productDate", productDate);

		// 是否发布
		String Release =isRelease; //;Byte.toString(isRelease);
		if ("true".equals(Release)) {
			request.setAttribute("checkRelease", "checked");
		} else {
			request.setAttribute("checkRelease", "");
		}

		// 是否新品
		String NewGoods =isNewGoods ;//Byte.toString(prd.getIsNewGoods());
		if ("true".equals(NewGoods)) {
			request.setAttribute("checkNewGoods", "checked");
		} else {
			request.setAttribute("checkNewGoods", "");
		}

		// 是否推荐
		String IfCommend =ifCommend ;//Byte.toString(prd.getIfCommend());
		if ("true".equals(IfCommend)) {
			request.setAttribute("checkCommend", "checked");
		} else {
			request.setAttribute("checkCommend", "");
		}

		// 是否特价
		String SpecialPrice = isSpecialPrice;//Byte.toString(prd.getIsSpecialPrice());
		if ("true".equals(SpecialPrice)) {
			request.setAttribute("checkSpecialPrice", "checked");
		} else {
			request.setAttribute("checkSpecialPrice", "");
		}

		// 品牌列表

		List brandList = this.productModifyService.showBrand();
		request.setAttribute("brandList", brandList);

		// 单位列表
		List unitList = this.productModifyService.showUnit();
		request.setAttribute("unitList", unitList);

		// 供应商
		List ManufacturerList = this.productModifyService.showManufacturer();
		request.setAttribute("ManufacturerList", ManufacturerList);

		return mapping.findForward("success");
	}

	public ActionForward save(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String pId = request.getParameter("pId");
		request.setAttribute("pId", pId);

		String catalogId = request.getParameter("id");
		request.setAttribute("id", catalogId);

		String catalogName = request.getParameter("catalogName");
		request.setAttribute("catalogName", catalogName);

		String productname = request.getParameter("productname");

		String brand = request.getParameter("brand");// 品牌

		String specification = request.getParameter("specification");

		String unitId = request.getParameter("UnitName");

		String marketPrice = request.getParameter("marketPrice");// 市场价
		char s2='.';
		if(marketPrice.trim().length()>0)
		{
		char point=marketPrice.charAt(marketPrice.length()-1);
		if(point==s2) 
		{
			marketPrice=marketPrice+"0";	
		}
		}

		String memberPrice = request.getParameter("memberPrice");// 会员价
		if(memberPrice.trim().length()>0)
		{
		char str=memberPrice.charAt(memberPrice.length()-1);
		if(str==s2) 
		{
			memberPrice=memberPrice+"0";	
		}
		}
		
		//库存
		String stock = request.getParameter("stock");
		if(stock.trim().length()>0)
		{
		char sto=stock.charAt(stock.length()-1);
		if(sto==s2) 
		{
			stock=stock+"0";	
		}
		}
		
		
		

		String smallPath = request.getParameter("smallPath");
		// smallPath="C:"+"\\\\"+"images"+"\\\\"+"smallPic"+"\\\\"+smallPath;

		String bigPath = request.getParameter("bigPath");
		// bigPath="C:"+"\\\\"+"images"+"\\\\"+"bigPic"+"\\\\"+bigPath;

		// 生产日期
		String productDate = request.getParameter("productDate");
		// String year = productDate.substring(0, 4);
		// String month = productDate.substring(4, 6);
		// String day = productDate.substring(6, 8);
		// productDate = year + "-" + month + "-" + day;

		// 供应商id
		String ManufacturerID = request.getParameter("ManufacturerName");

		// /是否发布
		String[] chkIsRelease = request.getParameterValues("chkIsRelease");
		String isRelease = "";
		if (chkIsRelease != null) {
			if (chkIsRelease[0].equals("on"))// 在这边有点多余，写出来比较明确，就是被选中的意思,当checkbox,没有给value具体值时候，选中会返回一个on
			{
				isRelease = "1";
			}
		} else {
			isRelease = "0";
		}

		// /是否新品
		String[] chkIsNewGoods = request.getParameterValues("chkIsNewGoods");

		String isNewGoods = "";
		if (chkIsNewGoods != null) {
			if (chkIsNewGoods[0].equals("on"))// 有点多余，写出来比较明确，就是被选中的意思
			{
				isNewGoods = "1";
			}
		} else {
			isNewGoods = "0";
		}

		// 是否推荐
		String[] chkIsCommend = request.getParameterValues("chkIsCommend");
		String ifCommend = "";
		if (chkIsCommend != null) {
			if (chkIsCommend[0].equals("on"))// 有点多余，写出来比较明确，就是被选中的意思
			{
				ifCommend = "1";
			}
		} else {
			ifCommend = "0";
		}

		// 商品介绍
		String productIntro = request.getParameter("productIntro");

		// /是否特价

		String[] chkIsSpecialPrice = request
				.getParameterValues("chkIsSpecialPrice");
		String isSpecialPrice = "";
		if (chkIsSpecialPrice != null) {
			if (chkIsSpecialPrice[0].equals("on"))// 有点多余，写出来比较明确，就是被选中的意思
			{
				isSpecialPrice = "1";
			}
		} else {
			isSpecialPrice = "0";
		}

		this.productModifyService.updateProduct(pId, productname, catalogId,
				productDate, ManufacturerID, ifCommend, marketPrice,
				memberPrice, brand, productIntro, smallPath, bigPath,
				specification, unitId, stock, isRelease, isNewGoods,
				isSpecialPrice);

		String page = request.getParameter("page");
		request.setAttribute("page", page);

		request.setAttribute("selTypeUrl", request.getParameter("selType"));

		request.setAttribute("xgResult", "更新成功");

		return mapping.findForward("updateSuccess");
	}

	@SuppressWarnings("unchecked")
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// 商品id
		request.setAttribute("id", "0");
		request.setAttribute("catalogName", "请选择商品名称");

		// 默认获取系统时间为 上架时间
		Calendar rightNow = Calendar.getInstance();
		SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
		String sysDatetime = fmt.format(rightNow.getTime());

		request.setAttribute("displayDate", sysDatetime);

		// 默认为 系统时间为系统时间，允许用户更改
		request.setAttribute("productDate", sysDatetime);

		request.setAttribute("page", request.getParameter("page"));
		request.setAttribute("selTypeUrl", request.getParameter("selTypeUrl"));

		// 品牌列表

		List brandList = this.productModifyService.showBrand();
		request.setAttribute("brandList", brandList);

		// 单位列表
		List unitList = this.productModifyService.showUnit();
		request.setAttribute("unitList", unitList);

		// 供应商
		List ManufacturerList = this.productModifyService.showManufacturer();
		request.setAttribute("ManufacturerList", ManufacturerList);

		// ////////商品小图片 文件名
		String fileName = request.getParameter("fileName");
		if (fileName == null) {
			fileName = "";
		}
		request.setAttribute("fileName", fileName);

		String bigfileName = request.getParameter("bigfileName");
		if (bigfileName == null) {
			bigfileName = "";
		}
		request.setAttribute("bigfileName", bigfileName);

		/*
		 * String everyStr=request.getParameter("everyStr"); if(everyStr!=null) {
		 * String [] evertStrArray=everyStr.split(";"); for(int i=0;i<evertStrArray.length;i++) {
		 * String kk=evertStrArray[i].toString();
		 * 
		 * switch(i) { case 0:request.setAttribute("id",
		 * evertStrArray[i].toString());break; case
		 * 1:request.setAttribute("catalogName",
		 * evertStrArray[i].toString());break; case
		 * 2:request.setAttribute("productname",
		 * evertStrArray[i].toString());break; case
		 * 3:request.setAttribute("brand", evertStrArray[i].toString());break;
		 * case 4:request.setAttribute("specification",
		 * evertStrArray[i].toString());break; case
		 * 5:request.setAttribute("UnitName",
		 * evertStrArray[i].toString());break; case
		 * 6:request.setAttribute("marketPrice",
		 * evertStrArray[i].toString());break; case
		 * 7:request.setAttribute("memberPrice",
		 * evertStrArray[i].toString());break; case
		 * 8:request.setAttribute("stock", evertStrArray[i].toString());break;
		 * case 9:request.setAttribute("ManufacturerName",
		 * evertStrArray[i].toString());break; case
		 * 10:request.setAttribute("productDate",
		 * evertStrArray[i].toString());break; case
		 * 11:request.setAttribute("productIntro",
		 * evertStrArray[i].toString());break; case 12:{ String
		 * IsRelease=evertStrArray[i].toString(); if (IsRelease.equals("on")) {
		 * request.setAttribute("chkRelease", "checked"); } else {
		 * request.setAttribute("chkRelease", ""); } break; } case 13:{ String
		 * IsNewGoods=evertStrArray[i].toString(); if (IsNewGoods.equals("on")) {
		 * request.setAttribute("checkNewGoods", "checked"); } else {
		 * request.setAttribute("checkNewGoods", ""); } break; } case 14:{
		 * String IsCommend=evertStrArray[i].toString(); if
		 * (IsCommend.equals("on")) { request.setAttribute("checkCommend",
		 * "checked"); } else { request.setAttribute("checkCommend", ""); }
		 * break; } case 15:{ String IsSpecialPrice=evertStrArray[i].toString();
		 * if (IsSpecialPrice.equals("on")) {
		 * request.setAttribute("checkSpecialPrice", "checked"); } else {
		 * request.setAttribute("checkSpecialPrice", ""); } break;} } } } else
		 */

		/*
		 * String kk=request.getSession(true).getAttribute("id").;
		 * 
		 * if(kk!=null) { request.setAttribute("id",
		 * request.getSession(true).getAttribute("id").toString()); }
		 * 
		 * if(request.getSession(true).getAttribute("catalogName")!=null) {
		 * request.setAttribute("catalogName",
		 * request.getSession(true).getAttribute("catalogName").toString()); }
		 * 
		 * if(request.getSession(true).getAttribute("productname")!=null) {
		 * request.setAttribute("productname",
		 * request.getSession(true).getAttribute("productname").toString()); }
		 * else { request.setAttribute("productname", ""); }
		 * 
		 * if(request.getSession(true).getAttribute("brand")!=null) {
		 * request.setAttribute("brand",
		 * request.getSession(true).getAttribute("brand").toString()); } else {
		 * request.setAttribute("brand", ""); }
		 * 
		 * if(request.getSession(true).getAttribute("specification")!=null) {
		 * request.setAttribute("specification",
		 * request.getSession(true).getAttribute("specification").toString()); }
		 * else { request.setAttribute("specification", ""); }
		 * 
		 * if(request.getSession(true).getAttribute("UnitName")!=null) {
		 * request.setAttribute("UnitName",
		 * request.getSession(true).getAttribute("UnitName").toString()); } else {
		 * request.setAttribute("UnitName", ""); }
		 * 
		 * if(request.getSession(true).getAttribute("marketPrice")!=null) {
		 * request.setAttribute("marketPrice",
		 * request.getSession(true).getAttribute("marketPrice").toString()); }
		 * else { request.setAttribute("marketPrice", ""); }
		 * 
		 * if(request.getSession(true).getAttribute("memberPrice")!=null) {
		 * request.setAttribute("memberPrice",
		 * request.getSession(true).getAttribute("memberPrice").toString()); }
		 * else { request.setAttribute("memberPrice", ""); }
		 * 
		 * if(request.getSession(true).getAttribute("stock")!=null) {
		 * request.setAttribute("stock",
		 * request.getSession(true).getAttribute("stock").toString()); } else {
		 * request.setAttribute("stock", ""); }
		 * 
		 * if(request.getSession(true).getAttribute("ManufacturerName")!=null) {
		 * request.setAttribute("ManufacturerName",
		 * request.getSession(true).getAttribute("ManufacturerName").toString()); }
		 * else { request.setAttribute("ManufacturerName", ""); }
		 * 
		 * if(request.getSession(true).getAttribute("productDate")!=null) {
		 * request.setAttribute("ManufacturerName",
		 * request.getSession(true).getAttribute("productDate").toString()); }
		 * else { request.setAttribute("productDate", ""); }
		 * 
		 * if(request.getSession(true).getAttribute("productIntro")!=null) {
		 * request.setAttribute("productIntro",
		 * request.getSession(true).getAttribute("productIntro").toString()); }
		 * else { request.setAttribute("productIntro", ""); }
		 * 
		 * if(request.getSession(true).getAttribute("chkIsRelease")!=null) {
		 * request.setAttribute("chkRelease", "checked"); } else {
		 * request.setAttribute("chkRelease", ""); }
		 * 
		 * if(request.getSession(true).getAttribute("chkIsNewGoods")!=null) {
		 * request.setAttribute("checkNewGoods", "checked"); } else {
		 * request.setAttribute("checkNewGoods", ""); }
		 * 
		 * if(request.getSession(true).getAttribute("chkIsCommend")!=null) {
		 * request.setAttribute("checkCommend", "checked"); } else {
		 * request.setAttribute("checkCommend", ""); }
		 * 
		 * if(request.getSession(true).getAttribute("chkIsSpecialPrice")!=null) {
		 * request.setAttribute("checkSpecialPrice", "checked"); } else {
		 * request.setAttribute("checkSpecialPrice", ""); }
		 */

		return mapping.findForward("add");
	}

	/*
	 * //上传小图片返回 添加页面
	 * 
	 * private ServletConfig config;
	 * 
	 * final public void init(ServletConfig config) throws ServletException {
	 * this.config = config; }
	 * 
	 * public ActionForward addSmallPicture(ActionMapping mapping, ActionForm
	 * form, HttpServletRequest request, HttpServletResponse response) throws
	 * IOException, SmartUploadException { SmartUpload mySmartUpload=new
	 * SmartUpload();
	 * 
	 * 
	 * //计算文件上传个数 int count=0; //SmartUpload的初始化，使用这个jspsmart一定要在一开始就这样声明 try {
	 * //PageContext pageContext = PageContext.getServletConfig();
	 * 
	 * mySmartUpload.initialize(config, request, response);
	 * 
	 * //mySmartUpload.initialize(pageContext); mySmartUpload.upload(); } catch
	 * (ServletException e) { // TODO Auto-generated catch block
	 * e.printStackTrace(); } //依据form的内容上传
	 * 
	 * //将上传的文件一个一个取出来处理
	 * 
	 * for (int i=0;i<mySmartUpload.getFiles().getCount();i++) { //取出一个文件
	 * com.jspsmart.upload.File myFile = mySmartUpload.getFiles().getFile(i);
	 * String fileName = myFile.getFileName();//去上传文件的名字
	 * 
	 * request.setAttribute("fileName", fileName); //如果文件存在，则做存档操作 if
	 * (!myFile.isMissing()){
	 * 
	 * //将文件存放于绝对路径的位置（这里是物理路径） myFile.saveAs("C:\\images\\smallPic\\" +
	 * fileName, mySmartUpload.SAVE_PHYSICAL); count ++; } }
	 * 
	 * 
	 * return mapping.findForward("updSmallPicBack");
	 *  }
	 */
	// 显示小图片-增加
	public ActionForward showSmallPicture(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		String picPath = request.getParameter("picPath");
		request.setAttribute("picPath", picPath);

		return mapping.findForward("showSmallPic");
	}

	public ActionForward bigPicDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String picPath = request.getParameter("picPath");// 大图片路径
		request.setAttribute("picPath", picPath);

		return mapping.findForward("showBigPic");
	}

	// 显示大图片-增加

	public ActionForward showBigPicture(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String picPath = request.getParameter("picPath");
		request.setAttribute("picPath", picPath);

		return mapping.findForward("showBigPic");
	}

	// 添加保存
	@SuppressWarnings("unchecked")
	public ActionForward AddSave(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		Page pg = new Page();
		String tag = "PT";// 标志位
		int len = 12;// 位数
		String tableStr = "t_lsh";// 表名
		String dateField = "productDate";// 日期字段名
		String initField = "productInitValue";// 初始化值
		String ProductId = pg.lshNO(tag, len, tableStr, dateField, initField);// 自动生成
		// 商品流水号

		String Productname = request.getParameter("productname");
		String CatalogId = request.getParameter("id");

		String page = request.getParameter("page");
		request.setAttribute("page", page);

		// 上架时间 字段类型为 Timestamp，自动生成时间
		// Timestamp t = new Timestamp(new java.util.Date().getTime());

		// String DisplayDate=request.getParameter("displayDate");

		// long DisplayDate =t.getDateTime();

		// 生产日期
		// SimpleDateFormat bartDateFormat =new SimpleDateFormat("yyyy-mm-dd");
		String ProductDate = request.getParameter("productDate");
		// String year = ProductDate.substring(0, 4);// 包含０，不包含４
		// String month = ProductDate.substring(4, 6);
		// String day = ProductDate.substring(6, 8);
		// ProductDate = year + "-" + month + "-" + day;

		// String ProductDate=bartDateFormat.format(productDate);

		// 供应商id
		String ManufacturerID = request.getParameter("ManufacturerName");

		// 是否推荐
		String str[] = request.getParameterValues("chkIsCommend");
		String IfCommend = "";
		if (str != null) {
			if ("on".equals(str[0])) {
				IfCommend = "1";
			}
		} else {
			IfCommend = "0";
		}

		// 市场价
		String MarketPrice = request.getParameter("marketPrice");
		char s2 = '.';
		if(MarketPrice.trim().length()>0)
		{
		char point = MarketPrice.charAt(MarketPrice.length() - 1);
	
		if (point == s2) {
			MarketPrice = MarketPrice + "0";
		}
		}

		// 会员价
		String MemberPrice = request.getParameter("memberPrice");
		if(MemberPrice.trim().length()>0)
		{
		char Men = MemberPrice.charAt(MemberPrice.length() - 1);
		if (Men == s2) {
			MemberPrice = MemberPrice + "0";
		}
		}

		// 品牌
		String Brand = request.getParameter("brand");

		// 商品介绍
		String ProductIntro = request.getParameter("productIntro");

		String SmallPath = request.getParameter("smallPath");

		// SmallPath="C:"+"\\\\"+"images"+"\\\\"+"smallPic"+"\\\\"+SmallPath;

		String BigPath = request.getParameter("bigPath");
		// BigPath="C:"+"\\\\"+"images"+"\\\\"+"bigPic"+"\\\\"+BigPath;

		// 规格
		String Specification = request.getParameter("specification");

		// 单位id
		String UnitId = request.getParameter("UnitName");

		// 库存
		String Stock = request.getParameter("stock");
		if(Stock.trim().length()>0)
		{
		char sto = Stock.charAt(Stock.length() - 1);
		if (sto == s2) {
			Stock = Stock + "0";
		}
		}

		// 是否发布
		String chkIsRelease[] = request.getParameterValues("chkIsRelease");
		String isRelease = "";
		if (chkIsRelease != null) {
			if ("on".equals(chkIsRelease[0])) {
				isRelease = "1";
			}
		} else {
			isRelease = "0";
		}

		// 是否新品
		String chkIsNewGoods[] = request.getParameterValues("chkIsNewGoods");
		String isNewGoods = "";
		if (chkIsNewGoods != null) {
			if ("on".equals(chkIsNewGoods[0])) {
				isNewGoods = "1";
			}
		} else {
			isNewGoods = "0";
		}

		// 是否特价

		String chkIsSpecialPrice[] = request
				.getParameterValues("chkIsSpecialPrice");
		String isSpecialPrice = "";
		if (chkIsSpecialPrice != null) {
			if ("on".equals(chkIsSpecialPrice[0])) {
				isSpecialPrice = "1";
			}
		} else {
			isSpecialPrice = "0";
		}

		this.productModifyService.addSave(ProductId, Productname, CatalogId,
				ProductDate, ManufacturerID, IfCommend, MarketPrice,
				MemberPrice, Brand, ProductIntro, SmallPath, BigPath,
				Specification, UnitId, Stock, isRelease, isNewGoods,
				isSpecialPrice);

		// 商品id
		request.setAttribute("id", "0");
		request.setAttribute("catalogName", "请选择商品名称 ");

		// 默认获取系统时间为 上架时间
		Calendar rightNow = Calendar.getInstance();
		SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
		String sysDatetime = fmt.format(rightNow.getTime());

		request.setAttribute("displayDate", sysDatetime);

		// 默认为 系统时间为系统时间，允许用户更改
		request.setAttribute("productDate", sysDatetime);

		// 品牌列表

		List brandList = this.productModifyService.showBrand();
		request.setAttribute("brandList", brandList);

		// 单位列表
		List unitList = this.productModifyService.showUnit();
		request.setAttribute("unitList", unitList);

		// 供应商
		List ManufacturerList = this.productModifyService.showManufacturer();
		request.setAttribute("ManufacturerList", ManufacturerList);

		request.setAttribute("xgResult", "添加成功");

		request.setAttribute("selTypeUrl", request.getParameter("selType"));

		return mapping.findForward("addSuccess");
	}

	public ActionForward modifyBack(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String page = request.getParameter("page");
		request.setAttribute("page", page);

		request.setAttribute("selType", request.getParameter("selType"));

		return mapping.findForward("modifyBack");
	}

	// 上传小图片－增加
	public ActionForward updSmallPic(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String page = request.getParameter("page");
		request.setAttribute("page", page);

		String selType = request.getParameter("selType");
		request.setAttribute("selType", selType);

		everyTypeStr(request);
		// request.setAttribute("everyStr", everyStr);

		return mapping.findForward("updSmallPic");
	}

	// //////////////xml树
	public ActionForward getTree(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String id = (String) request.getParameter("node");

		if (id == null)
			id = "0";

		response.setContentType("text/plain;charset=UTF-8");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out;
		try {
			out = response.getWriter();
			out.println(productModifyService.getGljgSimpleTree(id));
			out.flush();
			out.close();
		} catch (Exception e) {
			// TODO: handle exception
		}
		return null;

	}

	/*
	 * // 上传小图片 @SuppressWarnings("deprecation") public ActionForward
	 * uploadSmallPic(ActionMapping mapping, ActionForm form, HttpServletRequest
	 * request, HttpServletResponse response) throws FileNotFoundException,
	 * IOException {
	 * 
	 * String sWJM = "111"; ProductModifyForm ptdForm = (ProductModifyForm)
	 * form; FormFile inputfile = ptdForm.getWjm(); if (inputfile == null) {
	 * return mapping.findForward("failure"); } // String filename =
	 * inputfile.getFileName(); // String size =
	 * Integer.toString(inputfile.getFileSize())+"bytes";
	 * 
	 * InputStream is = inputfile.getInputStream(); String path =
	 * request.getRealPath("/files/data"); OutputStream os = new
	 * FileOutputStream(path + "/" + sWJM);
	 * 
	 * int bytes = 0; byte[] buffer = new byte[8192]; while ((bytes =
	 * is.read(buffer, 0, 8192)) != -1) { os.write(buffer, 0, bytes); }
	 * os.close(); is.close(); inputfile.destroy();
	 * 
	 * return null; }
	 */

	// // 上传大图片－增加
	@SuppressWarnings("deprecation")
	public ActionForward updBigPic(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws FileNotFoundException, IOException {

		String page = request.getParameter("page");
		request.setAttribute("page", page);

		String selType = request.getParameter("selType");
		request.setAttribute("selType", selType);

		return mapping.findForward("updBigPic");

		/*
		 * String sWjm = "";
		 *  // sWjm=request.getParameter("SmallPic"); ProductModifyForm ptdForm =
		 * (ProductModifyForm) form;
		 * 
		 * FormFile inputfile = ptdForm.getWjm(); if (inputfile == null) {
		 * return mapping.findForward("cjwj"); }
		 * 
		 * InputStream is = inputfile.getInputStream(); String path =
		 * request.getRealPath("/files/data"); OutputStream os = new
		 * FileOutputStream(path + "/" + sWjm);
		 * 
		 * int bytes = 0; byte[] buffer = new byte[8192]; while ((bytes =
		 * is.read(buffer, 0, 8192)) != -1) { os.write(buffer, 0, bytes); }
		 * os.close(); is.close(); inputfile.destroy();
		 * 
		 * return null;
		 * 
		 */}

	public void everyTypeStr(HttpServletRequest request) {
		request.getSession().setAttribute("id", request.getParameter("id"));

		request.getSession().setAttribute("catalogName",
				request.getParameter("catalogName"));

		request.getSession().setAttribute("productname",
				request.getParameter("productname"));

		request.getSession().setAttribute("brand",
				request.getParameter("brand"));

		request.getSession().setAttribute("specification",
				request.getParameter("specification"));

		request.getSession().setAttribute("UnitName",
				request.getParameter("UnitName"));

		request.getSession().setAttribute("marketPrice",
				request.getParameter("marketPrice"));

		request.getSession().setAttribute("memberPrice",
				request.getParameter("memberPrice"));

		request.getSession().setAttribute("stock",
				request.getParameter("stock"));

		// 供应商
		request.getSession().setAttribute("ManufacturerName",
				request.getParameter("ManufacturerName"));

		// 生产时间
		request.getSession().setAttribute("productDate",
				request.getParameter("productDate"));

		request.getSession().setAttribute("productIntro",
				request.getParameter("productIntro"));

		request.getSession().setAttribute("chkIsRelease",
				request.getParameter("chkIsRelease"));

		request.getSession().setAttribute("chkIsNewGoods",
				request.getParameter("chkIsNewGoods"));

		request.getSession().setAttribute("chkIsCommend",
				request.getParameter("chkIsCommend"));

		request.getSession().setAttribute("chkIsSpecialPrice",
				request.getParameter("chkIsSpecialPrice"));
	}

	public ActionForward deletePic(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		return mapping.findForward("delete");
	}

	public IProductModifyService getProductModifyService() {
		return productModifyService;
	}

	public void setProductModifyService(
			IProductModifyService productModifyService) {
		this.productModifyService = productModifyService;
	}
}
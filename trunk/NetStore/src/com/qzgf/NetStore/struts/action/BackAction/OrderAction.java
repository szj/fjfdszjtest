/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.qzgf.NetStore.struts.action.BackAction;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.qzgf.NetStore.pub.Page;
import com.qzgf.NetStore.service.IOrderService;
import com.qzgf.NetStore.struts.form.BackForm.OrderForm;

/** 
 * MyEclipse Struts
 * Creation date: 08-12-2008
 * 
 * XDoclet definition:
 * @struts.action path="/order" name="orderForm" input="/form/order.jsp" parameter="status" scope="request" validate="true"
 */
public class OrderAction extends DispatchAction {
	private IOrderService orderService;
	public IOrderService getOrderService() {
		return orderService;
	}

	public void setOrderService(IOrderService orderService) {
		this.orderService = orderService;
	}
	/**
	 * 根据订单状态查询该状态下的订单
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward listOrderByStatus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//获得要显示的订单的状态
		String orderStatus=request.getParameter("orderStatus");
		List listOrders=this.orderService.listOrdersByStatus(orderStatus);
		request.setAttribute("listOrders", listOrders);
		
		return mapping.findForward("order_Page");
	}

	/**
	 * 获得关于某个订单的详细信息包括寄件人，收件人，订单明细
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward getOrderDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String orderId=request.getParameter("orderId");
		String orderStatus=request.getParameter("orderStatus");
		//查询共用的用户信息，包括收件人，寄件人
		Map mapUserInfo=this.orderService.listOrderUserInfo(orderId);
		request.setAttribute("mapAllUserInfo", mapUserInfo);
		
		//查询某个定单的定单明细
		List listOrderDetail=this.orderService.listOrderDetails(orderId);
		request.setAttribute("listOrderDetail", listOrderDetail);
		request.setAttribute("orderStatus", orderStatus);
		
		return mapping.findForward("orderDetail_Page");
	}
	
	/**
	 * 修改订单状态,如从等待付款定单改为正在配货定单
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward changeOrderStatus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//String userId=(String)request.getSession().getAttribute("userId");
		String userId="whitewolf";
		String orderId=request.getParameter("orderId");
		String nextOrderStatus=request.getParameter("nextOrderStatus");
		boolean flag=this.orderService.updateOrderStatus(orderId, nextOrderStatus,userId);
		if(flag){
			if(nextOrderStatus.equals("3")){
				request.setAttribute("updateInfo", new String("成功确认订单已支付"));
				request.setAttribute("preOrderStatus", "2");
			}
			else if(nextOrderStatus.equals("4")){
				request.setAttribute("updateInfo", new String("配货完成,订单已成功转为'等待发货'"));
				request.setAttribute("preOrderStatus", "3");
			}
			else if(nextOrderStatus.equals("5")){
				request.setAttribute("updateInfo", new String("订单已成功转为'已发货'"));
				request.setAttribute("preOrderStatus", "4");
			}
			else if(nextOrderStatus.equals("6")){
				request.setAttribute("updateInfo", new String("订单已成功转为'已收货'"));
				request.setAttribute("preOrderStatus", "5");
			}
			return mapping.findForward("statusUpdateSuccess_Page");
		}
		else{
		    return null;
		}
	}
	

	@SuppressWarnings("unchecked")
	public ActionForward listPayType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//获得所有的支付方式
		List listPayType=this.orderService.queryAllPayType();
		request.setAttribute("listPayType", listPayType);
		return mapping.findForward("queryOrder_page");
	}
	
	/**
	 * 通过输入的条件查询服务这些条件的定单
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward queryOrders(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrderForm f=(OrderForm)form;
		
		String page =request.getParameter("page");
		if ("".equals(page) || page==null)	{
			page =request.getParameter("targetPage");
		}
		
		if ("".equals(page) || page==null)	{
			page="1";
		}
		//判断一下输入的页值是不是大于总的页数
		String totalPages= request.getParameter("totalPages");
		if  (!"".equals(totalPages) && totalPages!=null)
			if ((Integer.parseInt(page))>(Integer.parseInt(totalPages)))//输入的页数不能超过总页数
				page=totalPages;
	         //判断一下输入的页值是不是大于总的页数	
			request.setAttribute("targetPage", page);
			request.setAttribute("page", page);
		
		Page ppage = this.orderService.queryOrders(f.getOrderId(), f.getOrderStatus(), f.getUserId(), f.getAllSum(),
				f.getPayTypeId(), f.getBeginDay(), f.getEndDay(),Integer.parseInt(page));
		request.setAttribute("ppage",ppage);
		Map queryInfo=new HashMap();
		queryInfo.put("orderId", f.getOrderId());
		queryInfo.put("orderStatus",f.getOrderStatus());
		queryInfo.put("userId", f.getUserId());
		queryInfo.put("allSum", f.getAllSum());
		queryInfo.put("payTypeId", f.getPayTypeId());
		queryInfo.put("beginDay", f.getBeginDay());
		queryInfo.put("endDay", f.getEndDay());
		request.setAttribute("queryInfo", queryInfo);
		return mapping.findForward("queryOrder_result_page");
	}	
	
	/**
	 * 查询某一定单的历史操作记录
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward queryOperateHistory(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		String orderId=request.getParameter("orderId");
		List operateHistoryList=this.orderService.queryOperateHistory(orderId);
		request.setAttribute("orderId", orderId);
		request.setAttribute("operateHistoryList", operateHistoryList);   
		return mapping.findForward("operateHistory_Page");
	}
	
	/**
	 * 查定单时载入订单明细,不能做进一步的修改
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward queryAndLoadOrder(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String orderId=request.getParameter("orderId");
		//查询共用的用户信息，包括收件人，寄件人
		Map mapUserInfo=this.orderService.listOrderUserInfo(orderId);
		request.setAttribute("mapAllUserInfo", mapUserInfo);
		
		//查询某个定单的定单明细
		List listOrderDetail=this.orderService.listOrderDetails(orderId);
		request.setAttribute("listOrderDetail", listOrderDetail);
		
		return mapping.findForward("orderDetail_Page");
	}
}
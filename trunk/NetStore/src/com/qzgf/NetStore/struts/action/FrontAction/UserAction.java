/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.qzgf.NetStore.struts.action.FrontAction;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.qzgf.NetStore.persistence.Cart;
import com.qzgf.NetStore.persistence.User;
import com.qzgf.NetStore.pub.ThreadVariableManager;
import com.qzgf.NetStore.pub.WebConstant;
import com.qzgf.NetStore.pub.sessionMgr.SessionManager;
import com.qzgf.NetStore.service.IUserService;
import com.qzgf.NetStore.struts.form.FrontForm.UserForm;
import com.qzgf.NetStore.util.MD5Code;

/**
 * MyEclipse Struts Creation date: 07-16-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/user" name="userForm" input="/form/user.jsp"
 *                parameter="status" scope="request" validate="true"
 */
public class UserAction extends DispatchAction {
	private IUserService userService;

	public IUserService getUserService() {
		return userService;
	}

	public void setUserService(IUserService userService) {
		this.userService = userService;
	}

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward a(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		return null;
	}

	// 注册用户
	public ActionForward register(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserForm f = (UserForm) form;
		String xgResult = "";
		String userId = f.getUserid();
		String checkCode = f.getCheckcode();
		String password = f.getUserpwd();
		String confirmpwd = f.getConfirmpwd();
		String email = f.getEmail();
		User user = new User();
		if (userId == null || "".equals(userId)) {
			xgResult = "用户名输入有误";
			request.setAttribute("xgResult", xgResult);
			request.setAttribute("email", email);
			return mapping.findForward("register_Page");
		}

		if (password == null || "".equals(password) || confirmpwd == null
				|| "".equals(confirmpwd) || !password.equals(confirmpwd)
				|| password.length() < 6 || password.length() > 12) {
			xgResult = "密码输入有误,请重输";
			request.setAttribute("xgResult", xgResult);
			request.setAttribute("userId", userId);
			return mapping.findForward("register_Page");
		}
		String ccode = (String) request.getSession().getAttribute("ccode");
		if (checkCode == null || "".equals(checkCode)
				|| (!checkCode.equals(ccode))) {
			// 验证码输入不正确
			xgResult = "验证码输入不正确,请重输";
			request.setAttribute("xgResult", xgResult);
			request.setAttribute("userId", userId);
			request.setAttribute("email", email);
			return mapping.findForward("register_Page");
		}
		user.setUserId(userId);
		MD5Code md5 = new MD5Code();
		user.setUserPwd(md5.getMD5ofStr(f.getUserpwd()));
		user.setIfUsable("1");
		user.setEmail(email);
		boolean flag = this.userService.userRegister(user);
		if (flag) {
			// 获得SessionId
			String sessionId = SessionManager.getInstance().requestSessionId();
			ThreadVariableManager.getInstance().setCurrentSessionId(sessionId);
			ThreadVariableManager.getInstance().getCurrentServerUserContext()
					.setCurUserId(user.getUserId());
			// 将分配的返回给用户
			HttpSession session = request.getSession();
			// 将应用sessionId放入WebSession
			session.setAttribute(WebConstant.SESSIONID, sessionId);
			session.setAttribute("userId", userId);

			return mapping.findForward("index_Page");
		} else {
			xgResult = "注册失败,请重新注册";
			request.setAttribute("userId", userId);
			request.setAttribute("xgResult", xgResult);
			return mapping.findForward("register_Page");
		}
	}

	// 验证用户ID
	public ActionForward checkUserId(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String userid = null;
		try {
			userid = URLDecoder.decode(request.getParameter("userid"), "UTF-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			request.setCharacterEncoding("gbk");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		response.setContentType("text/html;charset=gbk");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out = null;
		try {
			out = response.getWriter();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		if ("".equals(userid) || userid == null) {
			out.println("请输入用户的ID");
			return null;
		}
		boolean flag = this.userService.checkUserId(userid);
		if (flag) {
			out.println("该用户已存在,请更换用户名");
		} else {
			out.println("该用户名可以使用");
		}
		return null;
	}

	// 检查注册码
	public ActionForward checkCCode(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String checkcode = request.getParameter("checkcode");
		String ccode = (String) request.getSession().getAttribute("ccode");
		response.setContentType("text/html;charset=gbk");
		response.setHeader("Cache-Control", "no-cache");
		PrintWriter out = null;

		try {
			out = response.getWriter();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		if (!checkcode.equals(ccode)) {
			out.println("验证码输入不正确");
		} else {
			out.println("验证码输入正确");
		}
		return null;
	}

	// 登录
	public ActionForward login(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		UserForm f = (UserForm) form;
		String xgResult = "";
		String sessionId = SessionManager.getInstance().requestSessionId();
		// 将sessionId设入线程里面
		ThreadVariableManager.getInstance().setCurrentSessionId(sessionId);
		String userId = f.getUserid();
		String userpwd = f.getUserpwd();
		User user = this.userService.login(userId);
		if (user != null) {
			if (!user.getIfUsable().equals("1")) {
				xgResult = "该用户已禁用,请联系服务人员";
				request.setAttribute("xgResult", xgResult);
				return mapping.getInputForward();
			}
			// 说明有存在这个用户信息
			MD5Code md5 = new MD5Code();
			if (md5.getMD5ofStr(f.getUserpwd()).equals(user.getUserPwd())) {
				// 设定当前用户的用户Id
				ThreadVariableManager.getInstance()
						.getCurrentServerUserContext().setCurUserId(
								user.getUserId());
				// 将分配的返回给用户
				HttpSession session = request.getSession();
				// 将应用sessionId放入WebSession
				session.setAttribute(WebConstant.SESSIONID, sessionId);
				session.setAttribute(WebConstant.CURUSERINFO, user);
				session.setAttribute("userId", userId);
				Cart cart = (Cart) session.getAttribute("cart");
				if (cart != null&&!cart.isEmpty()) {
					return mapping.findForward("toCheck");
				} else {
					return mapping.findForward("index_Page");
				}
			} else {
				xgResult = "您输入的密码有误,请重输";
				request.setAttribute("xgResult", xgResult);
				request.setAttribute("userId", userId);
				return mapping.getInputForward();
			}
		} else {
			// 如果运行到此处说明密码错误
			// 要清除sessionId,然后抛异常
			SessionManager.getInstance().removeSession(sessionId);
			xgResult = "用户名输入有误";
			request.setAttribute("xgResult", xgResult);
			return mapping.getInputForward();
		}
	}

}
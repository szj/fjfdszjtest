/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.qzgf.NetStore.struts.action.FrontAction;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.qzgf.NetStore.pub.SysConstants;
import com.qzgf.NetStore.pub.sessionMgr.SessionManager;
import com.qzgf.NetStore.service.IOrderService;
import com.qzgf.NetStore.struts.form.FrontForm.UserAccountForm;
import com.qzgf.NetStore.util.MD5Code;

/**
 * MyEclipse Struts Creation date: 08-18-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/userAccount" name="userAccountForm"
 *                input="/form/userAccount.jsp" parameter="status"
 *                scope="request" validate="true"
 */
public class UserAccountAction extends DispatchAction {
	private IOrderService orderService;

	public IOrderService getOrderService() {
		return orderService;
	}

	public void setOrderService(IOrderService orderService) {
		this.orderService = orderService;
	}

	/**
	 * 根据条件查询符合该条件的所有定单,用于用户账户首页的显示,默认不加条件,显示所有的定单
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward queryOrderByCondition(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String condition = request.getParameter("condition");
		String sessionId = (String) request.getSession().getAttribute(
				"SessionId");
		// 判断SessionId是否有效
		if (!(sessionId == null && "".equals(sessionId))) {
			SessionManager sessionMgr = SessionManager.getInstance();
			boolean valid = sessionMgr.isValid(sessionId);
			if (!valid) {
				// sessionId不合法
				return mapping.findForward("login_Page");
			} else {
				// sessionId合法
				// userId=(String)request.getSession().getAttribute("userId");
				String userId = (String) request.getSession().getAttribute(
						"userId");

				List orderList = this.orderService.queryOrdersByCondition(
						condition, userId);
				if (orderList.size() > 0){
					
					//用于网银支付的
					String MerId = SysConstants.MerId;// 商户号
					// 货币类型
					String CuryId = SysConstants.CuryId;
					// 日期
					String TransDate = null;
					SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyyMMdd");
					TransDate = sdf.format(new Date());
					// 交易类型
					String TransType = SysConstants.TransType;
					request.setAttribute("MerId", MerId);
					// request.setAttribute("CuryId", CuryId);
					request.setAttribute("TransDate", "20081203");
					request.setAttribute("TransType", TransType);
					request.setAttribute("CuryId", CuryId);
					request.setAttribute("orderList", orderList);
				}
				else
					request.setAttribute("orderList", null);
				return mapping.findForward("userAccount_Page");
			}
		}
		return mapping.findForward("login_Page");
	}

	/**
	 * 查询某一具体的定单
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward getOrderDetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String orderId = request.getParameter("orderId");
		// 查询共用的用户信息，包括收件人，寄件人
		Map mapUserInfo = this.orderService.listOrderUserInfo(orderId);

		request.setAttribute("mapAllUserInfo", mapUserInfo);

		// 查询某个定单的定单明细
		List listOrderDetail = this.orderService.listOrderDetails(orderId);
		request.setAttribute("listOrderDetail", listOrderDetail);

		return mapping.findForward("orderDetail_Page");
	}

	/**
	 * 修改收件人信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward updateReceiveInfo(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		UserAccountForm f = (UserAccountForm) form;
		String orderId = f.getOrderId();
		String receiveUserName = f.getReceiveUser();
		String postCode = f.getReceivePostCode();
		String phone = f.getReceivePhone();
		String cellPhone = f.getReceiveCellPhone();
		String receiveUserAddress = f.getReceiveAddress();
		this.orderService.updateReceiveInfo(orderId, receiveUserName, postCode,
				phone, cellPhone, receiveUserAddress);

		// 查询共用的用户信息，包括收件人，寄件人
		Map mapUserInfo = this.orderService.listOrderUserInfo(orderId);

		request.setAttribute("mapAllUserInfo", mapUserInfo);

		// 查询某个定单的定单明细
		List listOrderDetail = this.orderService.listOrderDetails(orderId);
		request.setAttribute("listOrderDetail", listOrderDetail);

		return mapping.findForward("orderDetail_Page");

	}

	/**
	 * 修改收件人信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward querySendMode(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String orderId = request.getParameter("orderId");
		List sendModeList = this.orderService.querySendMode(orderId);
		request.setAttribute("sendModeList", sendModeList);
		request.setAttribute("orderId", orderId);
		return mapping.findForward("sendModeModify_Page");
	}

	/**
	 * 修改配送方式
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward updateSendMode(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserAccountForm f = (UserAccountForm) form;
		String orderId = request.getParameter("orderId");
		String newSendFee = request.getParameter("sendFee");
		String oldSendFee = request.getParameter("oldSendFee");
		String sendModeId = f.getSendModeId();
		boolean flag = this.orderService.updateSendMode(orderId, sendModeId,
				newSendFee, oldSendFee);
		if (flag) {

			// 查询共用的用户信息，包括收件人，寄件人
			Map mapUserInfo = this.orderService.listOrderUserInfo(orderId);

			request.setAttribute("mapAllUserInfo", mapUserInfo);

			// 查询某个定单的定单明细
			List listOrderDetail = this.orderService.listOrderDetails(orderId);
			request.setAttribute("listOrderDetail", listOrderDetail);

			return mapping.findForward("orderDetail_Page");

		} else {
			List sendModeList = this.orderService.querySendMode(orderId);
			request.setAttribute("sendModeList", sendModeList);
			request.setAttribute("orderId", orderId);
			return mapping.findForward("sendModeModify_Page");
		}
	}

	/**
	 * 查询付款方式,并用于修改
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward queryPayType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String orderId = request.getParameter("orderId");
		request.setAttribute("orderId", orderId);
		@SuppressWarnings("unused")
		List payTypeList = this.orderService.queryPayType(orderId);
		request.setAttribute("payTypeList", payTypeList);
		return mapping.findForward("payTypeModify_Page");
	}

	/**
	 * 修改付款方式
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward updatePayType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserAccountForm f = (UserAccountForm) form;
		String orderId = request.getParameter("orderId");
		request.setAttribute("orderId", orderId);
		boolean flag = this.orderService.updatePayType(orderId, f
				.getPayTypeId());
		if (flag) {

			// 查询共用的用户信息，包括收件人，寄件人
			Map mapUserInfo = this.orderService.listOrderUserInfo(orderId);

			request.setAttribute("mapAllUserInfo", mapUserInfo);

			// 查询某个定单的定单明细
			List listOrderDetail = this.orderService.listOrderDetails(orderId);
			request.setAttribute("listOrderDetail", listOrderDetail);

			return mapping.findForward("orderDetail_Page");

		} else {
			request.setAttribute("orderId", orderId);
			@SuppressWarnings("unused")
			List payTypeList = this.orderService.queryPayType(orderId);
			request.setAttribute("payTypeList", payTypeList);
			return mapping.findForward("payTypeModify_Page");
		}
	}

	/**
	 * 查询注册用户信息,用于修改
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward queryBuyInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// String userId=(String)request.getSession().getAttribute("userId");
		String sessionId = (String) request.getSession().getAttribute(
				"SessionId");
		// 判断SessionId是否有效
		if (!(sessionId == null && "".equals(sessionId))) {
			SessionManager sessionMgr = SessionManager.getInstance();
			boolean valid = sessionMgr.isValid(sessionId);
			if (!valid) {
				// sessionId不合法
				return mapping.findForward("login_Page");
			} else {
				// sessionId合法
				// userId=(String)request.getSession().getAttribute("userId");
				String userId = (String) request.getSession().getAttribute(
						"userId");

				String orderId = request.getParameter("orderId");
				Map map = this.orderService.queryUserInfo(userId);
				request.setAttribute("userInfoMap", map);
				request.setAttribute("orderId", orderId);
				return mapping.findForward("buyInfoModify_Page");
			}
		}
		return mapping.findForward("login_Page");
	}

	/**
	 * 查询注册用户信息,用于修改
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward queryMyInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String sessionId = (String) request.getSession().getAttribute(
				"SessionId");
		// 判断SessionId是否有效
		if (!(sessionId == null && "".equals(sessionId))) {
			SessionManager sessionMgr = SessionManager.getInstance();
			boolean valid = sessionMgr.isValid(sessionId);
			if (!valid) {
				// sessionId不合法
				return mapping.findForward("login_Page");
			} else {
				// sessionId合法
				// userId=(String)request.getSession().getAttribute("userId");
				String userId = (String) request.getSession().getAttribute(
						"userId");

				String orderId = request.getParameter("orderId");
				Map map = this.orderService.queryUserInfo(userId);
				request.setAttribute("userInfoMap", map);
				request.setAttribute("orderId", orderId);
				return mapping.findForward("myInfoModify_Page");
			}
		}
		return mapping.findForward("login_Page");
	}

	/**
	 * 修改订购者信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward updateBuyInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserAccountForm f = (UserAccountForm) form;
		String orderId = request.getParameter("orderId");
		request.setAttribute("orderId", orderId);
		String realName = f.getRealName();
		String sex = f.getSex();
		String email = f.getEmail();
		String postCode = f.getPostCode();
		String phone = f.getPhone();
		String cellPhone = f.getCellPhone();
		String address = f.getAddress();
		String sessionId = (String) request.getSession().getAttribute(
				"SessionId");
		// 判断SessionId是否有效
		if (!(sessionId == null && "".equals(sessionId))) {
			SessionManager sessionMgr = SessionManager.getInstance();
			boolean valid = sessionMgr.isValid(sessionId);
			if (!valid) {
				// sessionId不合法
				return mapping.findForward("login_Page");
			} else {
				// sessionId合法
				// userId=(String)request.getSession().getAttribute("userId");
				String userId = (String) request.getSession().getAttribute(
						"userId");

				boolean flag = this.orderService.updateUserInfo(userId,
						realName, sex, email, postCode, phone, cellPhone,
						address);

				if (flag) {
					// 查询共用的用户信息，包括收件人，寄件人
					Map mapUserInfo = this.orderService
							.listOrderUserInfo(orderId);

					request.setAttribute("mapAllUserInfo", mapUserInfo);

					// 查询某个定单的定单明细
					List listOrderDetail = this.orderService
							.listOrderDetails(orderId);
					request.setAttribute("listOrderDetail", listOrderDetail);

					return mapping.findForward("orderDetail_Page");
				} else {
					Map map = this.orderService.queryUserInfo(userId);
					request.setAttribute("userInfoMap", map);
					request.setAttribute("orderId", orderId);
					return mapping.findForward("buyInfoModify_Page");
				}
			}
		}
		return mapping.findForward("login_Page");
	}

	/**
	 * 修改用户个人信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward updateMyInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserAccountForm f = (UserAccountForm) form;
		String orderId = request.getParameter("orderId");
		request.setAttribute("orderId", orderId);
		String realName = f.getRealName();
		String sex = f.getSex();
		String email = f.getEmail();
		String postCode = f.getPostCode();
		String phone = f.getPhone();
		String cellPhone = f.getCellPhone();
		String address = f.getAddress();
		String sessionId = (String) request.getSession().getAttribute(
				"SessionId");
		// 判断SessionId是否有效
		if (!(sessionId == null && "".equals(sessionId))) {
			SessionManager sessionMgr = SessionManager.getInstance();
			boolean valid = sessionMgr.isValid(sessionId);
			if (!valid) {
				// sessionId不合法
				return mapping.findForward("login_Page");
			} else {
				// sessionId合法
				// userId=(String)request.getSession().getAttribute("userId");
				String userId = (String) request.getSession().getAttribute(
						"userId");

				boolean flag = this.orderService.updateUserInfo(userId,
						realName, sex, email, postCode, phone, cellPhone,
						address);

				if (flag) {
					return mapping.findForward("myInfoModify_success_Page");
				} else {
					return null;
				}
			}
		}
		return mapping.findForward("login_Page");
	}

	/**
	 * 查询用户的E-mail用做修改
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward queryUserEmail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		String sessionId = (String) request.getSession().getAttribute(
				"SessionId");
		// 判断SessionId是否有效
		if (!(sessionId == null && "".equals(sessionId))) {
			SessionManager sessionMgr = SessionManager.getInstance();
			boolean valid = sessionMgr.isValid(sessionId);
			if (!valid) {
				// sessionId不合法
				return mapping.findForward("login_Page");
			} else {
				// sessionId合法
				// userId=(String)request.getSession().getAttribute("userId");
				String userId = (String) request.getSession().getAttribute(
						"userId");

				Map map = this.orderService.queryUserEmail(userId);
				request.setAttribute("userMailMap", map);
				return mapping.findForward("emailModify_Page");
			}
		}
		return mapping.findForward("login_Page");
	}

	/**
	 * 修改用户邮箱
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward updateUserEmail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		UserAccountForm f = (UserAccountForm) form;
		String sessionId = (String) request.getSession().getAttribute(
				"SessionId");
		// 判断SessionId是否有效
		if (!(sessionId == null && "".equals(sessionId))) {
			SessionManager sessionMgr = SessionManager.getInstance();
			boolean valid = sessionMgr.isValid(sessionId);
			if (!valid) {
				// sessionId不合法
				return mapping.findForward("login_Page");
			} else {
				// sessionId合法
				// userId=(String)request.getSession().getAttribute("userId");
				String userId = (String) request.getSession().getAttribute(
						"userId");

				String password = f.getUserPwd();
				String newEmail = f.getEmail();
				String xgResult = "";
				boolean flag = false;
				if (password == null || "".equals(password)) {
					// 密码为空
					xgResult = "您输入的密码为空,请重输";
					request.setAttribute("xgResult", xgResult);
					request.setAttribute("email", newEmail);
					return mapping.findForward("emailModify_Page");
				} else {
					MD5Code md5 = new MD5Code();
					String password_md5 = md5.getMD5ofStr(password);
					flag = this.orderService.updateUserEmail(userId,
							password_md5, newEmail);
				}

				if (flag) {
					return mapping.findForward("emailModify_success_Page");
				} else {
					xgResult = "邮件修改失败,请重试";
					Map map = this.orderService.queryUserEmail(userId);
					request.setAttribute("userMailMap", map);
					request.setAttribute("xgResult", xgResult);
					return mapping.findForward("emailModify_Page");
				}
			}
		}
		return mapping.findForward("login_Page");
	}

	public ActionForward to_modifyPwd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("passwordModify_Page");
	}

	/**
	 * 修改用户密码
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward updateUserPwd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserAccountForm f = (UserAccountForm) form;

		String sessionId = (String) request.getSession().getAttribute(
				"SessionId");
		// 判断SessionId是否有效
		if (!(sessionId == null && "".equals(sessionId))) {
			SessionManager sessionMgr = SessionManager.getInstance();
			boolean valid = sessionMgr.isValid(sessionId);
			if (!valid) {
				// sessionId不合法
				return mapping.findForward("login_Page");
			} else {
				// sessionId合法
				// userId=(String)request.getSession().getAttribute("userId");
				String userId = (String) request.getSession().getAttribute(
						"userId");

				String old_password = f.getOld_password();
				String new_password1 = f.getNew_password1();
				String new_password2 = f.getNew_password2();
				String xgResult = "";
				// 做个简单的判断
				if (old_password == null || "".equals(old_password)) {
					// 如果没有输入旧的密码的话,则密码不做修改
					xgResult = "旧密码输入有误,请重输";
					request.setAttribute("xgResult", xgResult);
					return mapping.findForward("passwordModify_Page");
				} else {
					// 判断两个新密码的位数,及值是否一致
					if (!new_password1.equals(new_password2)
							|| new_password1.length() < 6
							|| new_password1.length() > 12) {
						xgResult = "新密码输入有误,请重输!";
						request.setAttribute("old_password", old_password);
						request.setAttribute("xgResult", xgResult);
						return mapping.findForward("passwordModify_Page");
					} else {
						// 可用的新密码,执行MD5加密
						MD5Code md5 = new MD5Code();
						String old_password_md5 = md5.getMD5ofStr(old_password);
						String new_password_md5 = md5
								.getMD5ofStr(new_password1);
						boolean flag = this.orderService.updateUserPwd(userId,
								old_password_md5, new_password_md5);
						if (flag) {
							return mapping
									.findForward("passwordModify_success_Page");
						} else {
							xgResult = "密码更新失败,请重试";
							request.setAttribute("xgResult", xgResult);
							return mapping.findForward("passwordModify_Page");
						}
					}
				}
			}
		}
		return mapping.findForward("login_Page");

	}
}
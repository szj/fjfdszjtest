@model QzgfFrame.Supervision.SendManager.Models.Send
@{
    
    ViewBag.Title = "选择派遣对象";
}       

<script src="@Url.Content("~/Lib/zTree/demoTools.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Lib/zTree/jquery-1.4.2.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Lib/zTree/jquery.ztree-2.6.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Lib/zTree/asyncData/demoData.js")" type="text/javascript"></script>

    <script type="text/javascript">

        //生成菜单树 begin

        var zTree1;
        var setting;
        var zNodes;
        setting = {
            checkable: true, //确定 zTree 的节点上是否显示 CheckBox
            callback: {
                change: zTreeOnChange //该事件在节点的 CheckBox 被点击时触发方法 zTreeOnChange
            }
        };

        function refreshTree() {
            //生成树，zNodes数据在asyncData\demoData.js中
            zTree1 = $("#treeDemo").zTree(setting, clone(zNodes));
        }

        function zTreeOnChange(event, treeId, treeNode) {
            
        }

        function GetTreeData() {
            $.getJSON('/Supervision/Send/GetTreeData?id=' + id, { Rnd: Math.random() }, function (data) {
                if (data.Type) {
                    zNodes = data.Data;
                }
            });
        }

        //生成菜单树 end

        var Validator = null;

        $(function () {
            refreshTree();

            //提交数据
            $("#newForm").ligerForm();
            deafultValidate($("#newForm"));
            var options = {
                dataType: 'json',      //期望服务器的的回应的类型。null、"xml"、"script"或者"json"其中之一。
                beforeSubmit: showRequest, //提交成功时执行
                error: showError, //提交错误时执行
                success: showResponse//后台返回后执行
            };
            $('#newForm').ajaxForm(options);

            $.metadata.setType("attr", "validate");
            var v = $("form").validate({
                debug: true,
                errorPlacement: function (lable, element) {
                    if (element.hasClass("l-textarea")) element.ligerTip({ content: lable.html(), appendIdTo: lable });
                    else if (element.hasClass("l-text-field")) element.parent().ligerTip({ content: lable.html(), appendIdTo: lable });
                    else lable.appendTo(element.parents("td:first").next("td"));
                },
                success: function (lable) {
                    lable.ligerHideTip();
                },
                submitHandler: function () {
                    $("form .l-text,.l-textarea").ligerHideTip();
                    alert("Submitted!")
                }
            });
            $("form").ligerForm();
            $(".l-button-test").click(function () {
                alert(v.element($("#txtName")));
            });

        });

        //提交成功时的数据
        function showRequest(formData, jqForm, options) {
            var datas = "";
            var num = 0;
            var dataArray = new Array();
            var unitArray = new Array();
            num = $("#archiveDistrict").find("option").length;
            for (var i = 0; i < num; i++) {
                var subject = new Object();
                subject["UnitName"] = $("#archiveDistrict option[index='" + i + "']").val();
                dataArray.push(subject);
            }
            unitArray.push(dataArray);
            $("#unitData").val(JSON2.stringify(unitArray));
            $.ligerDialog.waitting("正在保存中...");
            return true;
        }

        //提交出错返回信息
        function showError(data) {
            alert("showError " + data.Message);
        }

        //提交成功后跳转
        function showResponse(data, status) {
            if (data.Type) {
                $.ligerDialog.success(data.Message);
                window.location.href = "/Supervision/Send/Index"; //提交后，页面跳转的地址
            }
            else {
                $.ligerDialog.closeWaitting();
                alert(data.Message);
            }
        }

        /*begin*****文本区联动*******************************/
        //将左边选中的移动到右边
        function right_move() {
            var con_data = [];
            for (var i = 0; i < getId("leftUnit").length; i++) {
                if (getId("leftUnit").options[i].selected) {
                    con_data[con_data.length] = [getId("leftUnit").options[i].value, getId("leftUnit").options[i].text];
                }
            }
            getId("archiveDistrict").length = getId("archiveDistrict").length;
            for (var i = 0; i < con_data.length; i++) {
                var con_fla = true;
                for (var k = 0; k < getId("archiveDistrict").length; k++) {
                    if (con_data[i][0] == getId("archiveDistrict").options[k].value) {
                        con_fla = false;
                    }
                }
                if (con_fla) {
                    getId("archiveDistrict").options[getId("archiveDistrict").length] = new Option(con_data[i][1], con_data[i][0]);
                }
            }
        }

        //将右边选中的删除
        function del_right() {
            var index_data = [];
            for (var i = 0; i < getId("archiveDistrict").length; i++) {
                if (getId("archiveDistrict").options[i].selected) {
                    index_data[index_data.length] = [i];
                }
            }
            for (var i = index_data.length - 1; i >= 0; i--) {
                getId("archiveDistrict").removeChild(getId("archiveDistrict").options[index_data[i]]);
            }
        }

        function getId(id) {
            return document.getElementById(id);
        }
        /*end*****文本区联动*******************************/

    </script>
@using (Html.BeginForm("Unit", "Send", FormMethod.Post, new { enctype = "multipart/form-data", name = "newForm", id = "newForm" }))
{
    @Html.HiddenFor(m => m.Id)
    @Html.ValidationSummary(true, "Account creation was unsuccessful. Please correct the errors and try again.")
    <div>
        <table border=0 width="700" class="tb1">
	        <tr>
		        <td width=340px align=center valign=top>
		        <div class="zTreeDemoBackground">
			        <ul id="treeDemo" class="tree"></ul>
		        </div>		
		        </td>
	        </tr>
        </table>
        <table cellpadding="0" border="0" cellspacing="0" class="edittable">
            <tbody>
                <tr>
                    <td width="128" align="center" valign="middle">
                        @Html.DropDownList("leftUnit", (SelectList)ViewData["selUnit"], new Dictionary<string, object>() { { "size", 7 }, { "multiple", "multiple" }, { "style", "width:100px;" } }) 
                    </td>
                    <td width="101" align="center" valign="middle">
                        <input type="button" name="Submit" value=" 右移>> " onclick="right_move()"/>      
                        <br />      
                        <br />    
                        <input type="button" name="Submit2" value="删  除" onclick="del_right();" />
                    </td>    
                    <td width="128" align="center" valign="middle">
                        @Html.DropDownListFor(m => m.archiveDistrict, new SelectList(new string[] { }), new Dictionary<string, object>() { { "size", 7 }, { "multiple", "multiple" }, { "style", "width:100px;" } })
                    </td>  
                </tr> 
                <tr>
                    <td colspan="4" align="center">
                        <input type="submit" value="提 交" name="subsubmit"  id="subsubmit"/>
                        @Html.HiddenFor(m => m.unitData)
                        <input type="button" value="返 回" onclick="javascript:history.back()"/>
                    </td>
                </tr>
            </tbody>
        </table>
    </div> 
}